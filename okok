import { Component, OnInit, ViewChild } from '@angular/core';
import { MatTableDataSource } from '@angular/material/table';
import { MatSort } from '@angular/material/sort';
import { PostService } from '../../services/post.service';
import { Post } from '../../services/post.model';
import { MatDialog } from '@angular/material/dialog';
import { Router } from '@angular/router';
import { LoginService } from '../../services/login.service';
import { MatSnackBar } from '@angular/material/snack-bar';

@Component({
  selector: 'app-post-table',
  templateUrl: './post-table.component.html',
  styleUrls: ['./post-table.component.css']
})
export class PostTableComponent implements OnInit {
  displayedColumns: string[] = ['post_header', 'status', 'posted_by', 'posted_at', 'category', 'actions'];
  dataSource = new MatTableDataSource<Post>();
  categories: string[] = [];
  selectedCategory = '';
  searchKey = '';
  loggedIn = false;

  @ViewChild(MatSort) sort!: MatSort;

  constructor(
    private postService: PostService,
    private loginService: LoginService,
    private router: Router,
    private dialog: MatDialog,
    private snackBar: MatSnackBar
  ) {}

  ngOnInit(): void {
    this.loggedIn = this.loginService.isLoggedIn();
    this.loadPosts();
  }

  loadPosts() {
    this.postService.getPosts().subscribe(posts => {
      this.dataSource.data = posts;
      this.dataSource.sort = this.sort;

      this.categories = Array.from(new Set(posts.map(p => p.category?.categoryName || 'Uncategorized')));
    });
  }

  applyFilter() {
    this.dataSource.filter = this.searchKey.trim().toLowerCase();
  }

  filterByCategory() {
    if (!this.selectedCategory) {
      this.loadPosts();
    } else {
      this.dataSource.data = this.dataSource.data.filter(post => post.category?.categoryName === this.selectedCategory);
    }
  }

  clearSearch() {
    this.searchKey = '';
    this.applyFilter();
  }

  editPost(id: number) {
    this.router.navigate(['/new-post', id]);
  }

  deletePost(id: number) {
    const confirmed = confirm('Are you sure you want to delete this post?');
    if (confirmed) {
      this.postService.deletePost(id).subscribe(() => {
        this.snackBar.open('Post deleted!', '', { duration: 2000 });
        this.loadPosts();
      });
    }
  }

  toggleStatus(post: Post) {
    const confirmed = confirm(`Are you sure you want to ${post.status === 'ACTIVE' ? 'deactivate' : 'activate'} this post?`);
    if (confirmed) {
      this.postService.togglestatus(post.post_id).subscribe((updated) => {
        post.status = updated.status;
        this.snackBar.open(`Post ${updated.status.toLowerCase()}d!`, '', { duration: 2000 });
        this.loadPosts();
      });
    }
  }

  viewPost(postId: number) {
    this.router.navigate(['/viewpost', postId], { queryParams: { mode: 'view' } });
  }
}



###


.full-width {
  width: 100%;
}

.filter-controls {
  display: flex;
  gap: 20px;
  margin-bottom: 20px;
}

.active {
  color: green;
  font-weight: bold;
}

.inactive {
  color: red;
  font-weight: bold;
}

table {
  width: 100%;
}


##

<div class="filter-controls">
  <mat-form-field appearance="outline">
    <mat-label>Search Posts</mat-label>
    <input matInput (keyup)="applyFilter()" [(ngModel)]="searchKey" placeholder="Search by header" />
  </mat-form-field>

  <mat-form-field appearance="outline">
    <mat-label>Filter by Category</mat-label>
    <mat-select [(value)]="selectedCategory" (selectionChange)="filterByCategory()">
      <mat-option value="">All</mat-option>
      <mat-option *ngFor="let cat of categories" [value]="cat">{{ cat }}</mat-option>
    </mat-select>
  </mat-form-field>
</div>

<table mat-table [dataSource]="dataSource" matSort class="mat-elevation-z8 full-width">

  <!-- Header -->
  <ng-container matColumnDef="post_header">
    <th mat-header-cell *matHeaderCellDef mat-sort-header>Header</th>
    <td mat-cell *matCellDef="let post">{{ post.post_header }}</td>
  </ng-container>

  <ng-container matColumnDef="status">
    <th mat-header-cell *matHeaderCellDef mat-sort-header>Status</th>
    <td mat-cell *matCellDef="let post">
      <span [ngClass]="{'active': post.status === 'ACTIVE', 'inactive': post.status !== 'ACTIVE'}">
        {{ post.status }}
      </span>
    </td>
  </ng-container>

  <ng-container matColumnDef="posted_by">
    <th mat-header-cell *matHeaderCellDef mat-sort-header>Posted By</th>
    <td mat-cell *matCellDef="let post">{{ post.posted_by }}</td>
  </ng-container>

  <ng-container matColumnDef="posted_at">
    <th mat-header-cell *matHeaderCellDef mat-sort-header>Posted At</th>
    <td mat-cell *matCellDef="let post">{{ post.posted_at | date:'MMM d, y h:mm a' }}</td>
  </ng-container>

  <ng-container matColumnDef="category">
    <th mat-header-cell *matHeaderCellDef mat-sort-header>Category</th>
    <td mat-cell *matCellDef="let post">{{ post.category?.categoryName || 'Uncategorized' }}</td>
  </ng-container>

  <!-- Action Buttons -->
  <ng-container matColumnDef="actions">
    <th mat-header-cell *matHeaderCellDef>Actions</th>
    <td mat-cell *matCellDef="let post">
      <button mat-button color="primary" (click)="viewPost(post.post_id)">View</button>

      <ng-container *ngIf="loggedIn">
        <button mat-button color="accent" (click)="editPost(post.post_id)">Edit</button>
        <button mat-button color="warn" (click)="deletePost(post.post_id)">Delete</button>
        <button mat-button [color]="post.status === 'ACTIVE' ? 'warn' : 'primary'" (click)="toggleStatus(post)">
          {{ post.status === 'ACTIVE' ? 'Deactivate' : 'Activate' }}
        </button>
      </ng-container>
    </td>
  </ng-container>

  <tr mat-header-row *matHeaderRowDef="displayedColumns"></tr>
  <tr mat-row *matRowDef="let row; columns: displayedColumns;"></tr>

</table>



