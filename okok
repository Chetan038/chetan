<div class="post-table-container">
  <div class="search-filter-container">
    <mat-form-field appearance="outline" class="search-field">
      <mat-label>Search</mat-label>
      <input matInput [(ngModel)]="searchKey" (keyup)="applySearch()" placeholder="Search posts...">
      <button mat-button matSuffix mat-icon-button aria-label="Clear" *ngIf="searchKey" (click)="onSearchClear()">
        <mat-icon>close</mat-icon>
      </button>
    </mat-form-field>

    <mat-form-field appearance="outline" class="category-filter">
      <mat-label>Filter by Category</mat-label>
      <mat-select [(ngModel)]="selectedCategory" (selectionChange)="onCategoryChange()">
        <mat-option [value]="">All Categories</mat-option>
        <mat-option *ngFor="let category of categories" [value]="category.categoryName">
          {{category.categoryName}}
        </mat-option>
      </mat-select>
    </mat-form-field>
  </div>

  <div class="mat-elevation-z8 table-container">
    <table mat-table [dataSource]="dataSource" matSort>
      
      <!-- Post Header Column -->
      <ng-container matColumnDef="post_header">
        <th mat-header-cell *matHeaderCellDef mat-sort-header> Header </th>
        <td mat-cell *matCellDef="let post"> {{post.post_header}} </td>
      </ng-container>
      
      <!-- Status Column -->
      <ng-container matColumnDef="status">
        <th mat-header-cell *matHeaderCellDef mat-sort-header> Status </th>
        <td mat-cell *matCellDef="let post"> 
          <span class="status-chip" [ngClass]="getStatusClass(post.status)">
            {{post.status}}
          </span>
        </td>
      </ng-container>
      
      <!-- Posted By Column -->
      <ng-container matColumnDef="posted_by">
        <th mat-header-cell *matHeaderCellDef mat-sort-header> Posted By </th>
        <td mat-cell *matCellDef="let post"> {{post.posted_by}} </td>
      </ng-container>
      
      <!-- Posted At Column -->
      <ng-container matColumnDef="posted_at">
        <th mat-header-cell *matHeaderCellDef mat-sort-header> Posted At </th>
        <td mat-cell *matCellDef="let post"> {{post.posted_at | date: 'MMM d, y h:mm a'}} </td>
      </ng-container>
      
      <!-- Category Column -->
      <ng-container matColumnDef="categoryName">
        <th mat-header-cell *matHeaderCellDef mat-sort-header> Category </th>
        <td mat-cell *matCellDef="let post"> {{post.category?.categoryName || 'Uncategorized'}} </td>
      </ng-container>
      
      <!-- Actions Column -->
      <ng-container matColumnDef="actions">
        <th mat-header-cell *matHeaderCellDef> Actions </th>
        <td mat-cell *matCellDef="let post">
          <!-- View button (always visible) -->
          <button mat-icon-button color="primary" matTooltip="View Post" (click)="viewPost(post.post_id)">
            <mat-icon>visibility</mat-icon>
          </button>
          
          <!-- Buttons visible only for logged-in users -->
          <ng-container *ngIf="loggedIn">
            <!-- Edit button -->
            <button mat-icon-button color="primary" matTooltip="Edit Post" (click)="editPost(post.post_id)">
              <mat-icon>edit</mat-icon>
            </button>
            
            <!-- Toggle status button -->
            <button mat-icon-button [color]="post.status === 'ACTIVE' ? 'accent' : 'primary'" 
                [matTooltip]="post.status === 'ACTIVE' ? 'Deactivate Post' : 'Activate Post'"
                (click)="toggleStatus(post)">
              <mat-icon>{{ post.status === 'ACTIVE' ? 'toggle_on' : 'toggle_off' }}</mat-icon>
            </button>
            
            <!-- Delete button -->
            <button mat-icon-button color="warn" matTooltip="Delete Post" (click)="deletePost(post.post_id)">
              <mat-icon>delete</mat-icon>
            </button>
          </ng-container>
        </td>
      </ng-container>
      
      <tr mat-header-row *matHeaderRowDef="displayedColumns"></tr>
      <tr mat-row *matRowDef="let row; columns: displayedColumns;"></tr>
      
      <!-- Row shown when no matching data -->
      <tr class="mat-row" *matNoDataRow>
        <td class="mat-cell" colspan="6">
          No data matching the filter "{{searchKey}}"
        </td>
      </tr>
    </table>

    <mat-paginator [pageSizeOptions]="[5, 10, 25, 100]" showFirstLastButtons></mat-paginator>
  </div>
</div>

@@


.post-table-container {
  padding: 20px;
}

.search-filter-container {
  display: flex;
  flex-wrap: wrap;
  align-items: center;
  gap: 20px;
  margin-bottom: 20px;
}

.search-field {
  flex: 1;
  min-width: 200px;
}

.category-filter {
  width: 200px;
}

.table-container {
  overflow-x: auto;
  border-radius: 8px;
}

table {
  width: 100%;
}

.status-chip {
  padding: 4px 8px;
  border-radius: 16px;
  font-size: 12px;
  font-weight: 500;
  display: inline-block;
  min-width: 70px;
  text-align: center;
}

.status-active {
  background-color: #e6f7e6;
  color: #2e7d32;
  border: 1px solid #a5d6a7;
}

.status-inactive {
  background-color: #ffeaea;
  color: #c62828;
  border: 1px solid #ef9a9a;
}

mat-icon {
  font-size: 18px;
}

th.mat-header-cell {
  font-weight: bold;
  color: rgba(0, 0, 0, 0.87);
}

/* Responsive adjustments */
@media (max-width: 768px) {
  .search-filter-container {
    flex-direction: column;
    align-items: stretch;
  }
  
  .search-field, .category-filter {
    width: 100%;
  }
}


###


import { Component, OnInit, ViewChild } from '@angular/core';
import { MatTableDataSource } from '@angular/material/table';
import { MatSort } from '@angular/material/sort';
import { MatPaginator } from '@angular/material/paginator';
import { MatDialog } from '@angular/material/dialog';
import { MatSnackBar } from '@angular/material/snack-bar';
import { Router } from '@angular/router';
import { Post } from '../../services/post.model';
import { PostService } from '../../services/post.service';
import { LoginService } from '../../services/login.service';
import { ConfirmDialogComponent } from '../confirm-dialog/confirm-dialog.component';

@Component({
  selector: 'app-post-table',
  templateUrl: './post-table.component.html',
  styleUrls: ['./post-table.component.css']
})
export class PostTableComponent implements OnInit {
  displayedColumns: string[] = ['post_header', 'status', 'posted_by', 'posted_at', 'categoryName', 'actions'];
  dataSource = new MatTableDataSource<Post>([]);
  posts: Post[] = [];
  categories: any[] = [];
  loggedIn = false;
  selectedCategory: string = '';
  searchKey: string = '';
  
  @ViewChild(MatSort) sort!: MatSort;
  @ViewChild(MatPaginator) paginator!: MatPaginator;

  constructor(
    private postService: PostService,
    private loginService: LoginService,
    private dialog: MatDialog,
    private snackBar: MatSnackBar,
    private router: Router
  ) {}

  ngOnInit(): void {
    this.loggedIn = this.loginService.isLoggedIn();
    this.loadPosts();
    this.loadCategories();
  }

  ngAfterViewInit() {
    this.dataSource.paginator = this.paginator;
    this.dataSource.sort = this.sort;
    this.setupCustomSort();
  }

  setupCustomSort() {
    this.dataSource.sortingDataAccessor = (item, property) => {
      switch(property) {
        case 'categoryName': return item.category?.categoryName || '';
        default: return (item as any)[property];
      }
    };
  }

  loadPosts() {
    this.postService.getPosts().subscribe(
      (data: Post[]) => {
        this.posts = data;
        this.applyFilters();
      },
      (error) => {
        console.error('Error loading posts:', error);
        this.snackBar.open('Error loading posts. Please try again later.', 'Close', {
          duration: 3000
        });
      }
    );
  }

  loadCategories() {
    this.postService.getCategories().subscribe(
      (data) => {
        this.categories = data;
      },
      (error) => {
        console.error('Error loading categories:', error);
      }
    );
  }

  applyFilters() {
    let filteredPosts = [...this.posts];
    
    // Filter by login status - show all to logged in users, only active to non-logged in
    if (!this.loggedIn) {
      filteredPosts = filteredPosts.filter(post => post.status === 'ACTIVE');
    }
    
    // Filter by category if selected
    if (this.selectedCategory) {
      filteredPosts = filteredPosts.filter(post => 
        post.category?.categoryName === this.selectedCategory
      );
    }
    
    this.dataSource.data = filteredPosts;
    this.applySearch();
  }

  applySearch() {
    this.dataSource.filter = this.searchKey.trim().toLowerCase();
    
    if (this.dataSource.paginator) {
      this.dataSource.paginator.firstPage();
    }
  }

  onSearchClear() {
    this.searchKey = "";
    this.applySearch();
  }

  onCategoryChange() {
    this.applyFilters();
  }

  deletePost(postId: number) {
    const dialogRef = this.dialog.open(ConfirmDialogComponent, {
      width: '350px',
      data: {
        title: 'Confirm Delete',
        message: 'Are you sure you want to delete this post?',
        confirmButtonText: 'Delete',
        cancelButtonText: 'Cancel'
      }
    });

    dialogRef.afterClosed().subscribe(result => {
      if (result) {
        this.postService.deletePost(postId).subscribe(
          () => {
            this.posts = this.posts.filter(post => post.post_id !== postId);
            this.applyFilters();
            this.snackBar.open('Post deleted successfully', 'Close', {
              duration: 3000
            });
          },
          error => {
            console.error('Error deleting post:', error);
            this.snackBar.open('Error deleting post', 'Close', {
              duration: 3000
            });
          }
        );
      }
    });
  }

  toggleStatus(post: Post) {
    const action = post.status === 'ACTIVE' ? 'deactivate' : 'activate';
    
    const dialogRef = this.dialog.open(ConfirmDialogComponent, {
      width: '350px',
      data: {
        title: `Confirm ${action}`,
        message: `Are you sure you want to ${action} this post?`,
        confirmButtonText: 'Yes',
        cancelButtonText: 'Cancel'
      }
    });

    dialogRef.afterClosed().subscribe(result => {
      if (result) {
        this.postService.togglestatus(post.post_id).subscribe(
          (updatedPost) => {
            const index = this.posts.findIndex(p => p.post_id === post.post_id);
            if (index !== -1) {
              this.posts[index].status = updatedPost.status;
              this.applyFilters();
            }
            this.snackBar.open(`Post ${action}d successfully`, 'Close', {
              duration: 3000
            });
          },
          error => {
            console.error(`Error ${action}ing post:`, error);
            this.snackBar.open(`Error ${action}ing post`, 'Close', {
              duration: 3000
            });
          }
        );
      }
    });
  }

  editPost(postId: number) {
    this.router.navigate(['/new-post', postId]);
  }

  viewPost(postId: number) {
    this.router.navigate(['/viewpost', postId], { queryParams: { mode: 'view' } });
  }

  getStatusClass(status: string): string {
    return status === 'ACTIVE' ? 'status-active' : 'status-inactive';
  }
}




























    MatSelectModule,
    MatSnackBarModule,
    MatTooltipModule,
    MatDialogModule,
    BrowserAnimationsModule


@@@



import { Component, OnInit, ViewChild } from '@angular/core';
import { MatTableDataSource } from '@angular/material/table';
import { MatSort } from '@angular/material/sort';
import { PostService } from '../../services/post.service';
import { Post } from '../../services/post.model';
import { MatDialog } from '@angular/material/dialog';
import { Router } from '@angular/router';
import { LoginService } from '../../services/login.service';
import { MatSnackBar } from '@angular/material/snack-bar';

@Component({
  selector: 'app-post-table',
  templateUrl: './post-table.component.html',
  styleUrls: ['./post-table.component.css']
})
export class PostTableComponent implements OnInit {
  displayedColumns: string[] = ['post_header', 'status', 'posted_by', 'posted_at', 'category', 'actions'];
  dataSource = new MatTableDataSource<Post>();
  categories: string[] = [];
  selectedCategory = '';
  searchKey = '';
  loggedIn = false;

  @ViewChild(MatSort) sort!: MatSort;

  constructor(
    private postService: PostService,
    private loginService: LoginService,
    private router: Router,
    private dialog: MatDialog,
    private snackBar: MatSnackBar
  ) {}

  ngOnInit(): void {
    this.loggedIn = this.loginService.isLoggedIn();
    this.loadPosts();
  }

  loadPosts() {
    this.postService.getPosts().subscribe(posts => {
      this.dataSource.data = posts;
      this.dataSource.sort = this.sort;

      this.categories = Array.from(new Set(posts.map(p => p.category?.categoryName || 'Uncategorized')));
    });
  }

  applyFilter() {
    this.dataSource.filter = this.searchKey.trim().toLowerCase();
  }

  filterByCategory() {
    if (!this.selectedCategory) {
      this.loadPosts();
    } else {
      this.dataSource.data = this.dataSource.data.filter(post => post.category?.categoryName === this.selectedCategory);
    }
  }

  clearSearch() {
    this.searchKey = '';
    this.applyFilter();
  }

  editPost(id: number) {
    this.router.navigate(['/new-post', id]);
  }

  deletePost(id: number) {
    const confirmed = confirm('Are you sure you want to delete this post?');
    if (confirmed) {
      this.postService.deletePost(id).subscribe(() => {
        this.snackBar.open('Post deleted!', '', { duration: 2000 });
        this.loadPosts();
      });
    }
  }

  toggleStatus(post: Post) {
    const confirmed = confirm(`Are you sure you want to ${post.status === 'ACTIVE' ? 'deactivate' : 'activate'} this post?`);
    if (confirmed) {
      this.postService.togglestatus(post.post_id).subscribe((updated) => {
        post.status = updated.status;
        this.snackBar.open(`Post ${updated.status.toLowerCase()}d!`, '', { duration: 2000 });
        this.loadPosts();
      });
    }
  }

  viewPost(postId: number) {
    this.router.navigate(['/viewpost', postId], { queryParams: { mode: 'view' } });
  }
}



###


.full-width {
  width: 100%;
}

.filter-controls {
  display: flex;
  gap: 20px;
  margin-bottom: 20px;
}

.active {
  color: green;
  font-weight: bold;
}

.inactive {
  color: red;
  font-weight: bold;
}

table {
  width: 100%;
}


##

<div class="filter-controls">
  <mat-form-field appearance="outline">
    <mat-label>Search Posts</mat-label>
    <input matInput (keyup)="applyFilter()" [(ngModel)]="searchKey" placeholder="Search by header" />
  </mat-form-field>

  <mat-form-field appearance="outline">
    <mat-label>Filter by Category</mat-label>
    <mat-select [(value)]="selectedCategory" (selectionChange)="filterByCategory()">
      <mat-option value="">All</mat-option>
      <mat-option *ngFor="let cat of categories" [value]="cat">{{ cat }}</mat-option>
    </mat-select>
  </mat-form-field>
</div>

<table mat-table [dataSource]="dataSource" matSort class="mat-elevation-z8 full-width">

  <!-- Header -->
  <ng-container matColumnDef="post_header">
    <th mat-header-cell *matHeaderCellDef mat-sort-header>Header</th>
    <td mat-cell *matCellDef="let post">{{ post.post_header }}</td>
  </ng-container>

  <ng-container matColumnDef="status">
    <th mat-header-cell *matHeaderCellDef mat-sort-header>Status</th>
    <td mat-cell *matCellDef="let post">
      <span [ngClass]="{'active': post.status === 'ACTIVE', 'inactive': post.status !== 'ACTIVE'}">
        {{ post.status }}
      </span>
    </td>
  </ng-container>

  <ng-container matColumnDef="posted_by">
    <th mat-header-cell *matHeaderCellDef mat-sort-header>Posted By</th>
    <td mat-cell *matCellDef="let post">{{ post.posted_by }}</td>
  </ng-container>

  <ng-container matColumnDef="posted_at">
    <th mat-header-cell *matHeaderCellDef mat-sort-header>Posted At</th>
    <td mat-cell *matCellDef="let post">{{ post.posted_at | date:'MMM d, y h:mm a' }}</td>
  </ng-container>

  <ng-container matColumnDef="category">
    <th mat-header-cell *matHeaderCellDef mat-sort-header>Category</th>
    <td mat-cell *matCellDef="let post">{{ post.category?.categoryName || 'Uncategorized' }}</td>
  </ng-container>

  <!-- Action Buttons -->
  <ng-container matColumnDef="actions">
    <th mat-header-cell *matHeaderCellDef>Actions</th>
    <td mat-cell *matCellDef="let post">
      <button mat-button color="primary" (click)="viewPost(post.post_id)">View</button>

      <ng-container *ngIf="loggedIn">
        <button mat-button color="accent" (click)="editPost(post.post_id)">Edit</button>
        <button mat-button color="warn" (click)="deletePost(post.post_id)">Delete</button>
        <button mat-button [color]="post.status === 'ACTIVE' ? 'warn' : 'primary'" (click)="toggleStatus(post)">
          {{ post.status === 'ACTIVE' ? 'Deactivate' : 'Activate' }}
        </button>
      </ng-container>
    </td>
  </ng-container>

  <tr mat-header-row *matHeaderRowDef="displayedColumns"></tr>
  <tr mat-row *matRowDef="let row; columns: displayedColumns;"></tr>

</table>



