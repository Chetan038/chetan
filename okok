import { Component, OnInit } from '@angular/core';
import { ActivatedRoute, Router } from '@angular/router';
import { PostService } from '../../services/post.service';
import { Post } from '../../services/post.model';
import { LoginService } from '../../services/login.service';

@Component({
  selector: 'app-new-post',
  standalone: false,
  templateUrl: './new-post.component.html',
  styleUrl: './new-post.component.css'
})
export class NewPostComponent implements OnInit {
 
  posts: Post[] = [];
  isEditMode = false;
  isViewMode = false;
  statusValue : string="ACTIVE";

  categories: any[] = [];


  post = {
    post_id: 0, 
    post_header: '',
    post_content: '',
    status: 'ACTIVE',
    posted_by: '',
    posted_at: '',
    categoryId:0
  };

  responseMessage: string = '';

  constructor(
    private postService: PostService,
    private route: ActivatedRoute,
    private router: Router,
    private loginService:LoginService
  ) {}

  ngOnInit(): void {

   const storedUsername=this.loginService.getUsername();
   if(storedUsername){
    this.post.posted_by=storedUsername;
   }
   

    this.postService.getCategories().subscribe(data=>{
      this.categories=data;
    });

   
    this.route.params.subscribe(params => {
      const postId = params['id'];
      if (postId) {
        this.isEditMode = true;
      
        const numericPostId = Number(postId);

        this.route.queryParams.subscribe(queryParams => {
          if (queryParams['mode'] === 'view') {
            this.isViewMode = true;
            this.isEditMode = false; // Prevent editing in view mode
          }
        });
        
        // Get the post data for editing
        this.postService.getPosts().subscribe(posts => {
          this.posts = posts;
          const postToEdit = this.posts.find(p => p.post_id === numericPostId);
          if (postToEdit) {
            // Make a type-safe copy
            this.post = {
              post_id: postToEdit.post_id,
              post_header: postToEdit.post_header,
              post_content: postToEdit.post_content,
              status: postToEdit.status,
              posted_by: postToEdit.posted_by,
              posted_at: postToEdit.posted_at,
              categoryId: postToEdit.categoryId||0
            };
          } else {
            this.responseMessage = 'Post not found!';
          }
        });
      }
    });
  }

  submitPostForm() {
    if (this.isEditMode) {
      // Update existing post
      this.postService.editPost(this.post as Post).subscribe({
        next: (response) => {
          this.responseMessage = 'Post updated successfully!';
        
        },
        error: (error) => {
          this.responseMessage = 'Failed to update post!';
        }
      });
    } else {
      // Create new post
     
        this.postService.createPost(this.post).subscribe({
          next: (response) => {
            this.responseMessage = 'Post created successfully!';
            console.log("okokzz");
            this.post = {
              post_id: 0, 
              post_header: '',
              post_content: '',
              status: '',
              posted_by: '',
              posted_at: '',
              categoryId: 0
            };
       
          },
          error: (error) => {
            console.log("nonokzz");
            this.responseMessage = 'Failed to submit data!';
          }
        });
      
    }
  }

  cancelForm() {
    this.router.navigate(['/home']);
  }
}
