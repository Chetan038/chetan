import { Component, OnInit } from '@angular/core';
import { LoginService } from '../../services/login.service';
import {Post} from '../../services/post.model'
import { PostService } from '../../services/post.service';
import { MatDialog } from '@angular/material/dialog';
import { Router } from '@angular/router';
import { EditPostModalComponent } from '../edit-post-modal/edit-post-modal.component';


@Component({
  selector: 'app-home',
  standalone: false,
  templateUrl: './home.component.html',
  styleUrl: './home.component.css'
})
export class HOMEComponent implements OnInit{

    posts: Post[]=[];
    groupedPosts:{[key:string]:Post[]}={};
    searchTerms:{[key:string]:string}={};
    public loggedIn=false;
  
    constructor(private readonly loginService:LoginService, private postService:PostService,private dialog:MatDialog,private router:Router){}
    ngOnInit(): void {
      this.loggedIn=this.loginService.isLoggedIn();
      this.loadPosts();

    }

    loadPosts(){
      this.postService.getPosts().subscribe(
        (data: Post[])=>{
          console.log('posts',data);
          this.posts=data;
          this.groupPostsByCategory();
        },
      (error)=>{console.error('erro',error);}
      );
      
    }

    deletePost(postid:number){
      if(confirm('are you sure?'))
      {
        this.postService.deletePost(postid).subscribe(()=>{
          this.posts=this.posts.filter(pst => pst.post_id!==postid);
          this.groupPostsByCategory();
        });
      }
    }


    togglestatus(post:Post):void{
      this.postService.togglestatus(post.post_id).subscribe((updatedPost)=>
      {
        post.status=updatedPost.status;
      });
    }

    editPost(postId:number){
      this.router.navigate(['/new-post',postId]);
    }

    viewPost(postId:number){
      this.router.navigate(['/viewpost',postId],{queryParams:{mode:'view'}});
    }

    groupPostsByCategory(){
      this.groupedPosts={};
      this.searchTerms={};
      this.posts.forEach(post=>{
        if(post.status==='ACTIVE'||this.loggedIn){
          const category=post.category?.categoryName||'Uncategorized';
          if(!this.groupedPosts[category]){
            this.groupedPosts[category]=[];
            this.searchTerms[category]='';
          }
          this.groupedPosts[category].push(post);
        }
      });
    }

    getCategoryNames():string[]{
      return Object.keys(this.groupedPosts);
    }

    filterPosts(posts: Post[], searchTerm: string): Post[] {
      if (!searchTerm.trim()) return posts;
      return posts.filter(post =>
        post.post_header.toLowerCase().includes(searchTerm.toLowerCase())
      );
    }
  
    updateSearch(category: string, event: any) {
      this.searchTerms[category] = event.target.value;
    }
  
  
}



###


import { Component, OnInit, ViewChild } from '@angular/core';
import { MatTableDataSource } from '@angular/material/table';
import { MatSort } from '@angular/material/sort';
import { MatPaginator } from '@angular/material/paginator';
import { MatDialog } from '@angular/material/dialog';
import { MatSnackBar } from '@angular/material/snack-bar';
import { Router } from '@angular/router';
import { Post } from '../../services/post.model';
import { PostService } from '../../services/post.service';
import { LoginService } from '../../services/login.service';
import { ConfirmDialogComponent } from '../confirm-dialog/confirm-dialog.component';

@Component({
  selector: 'app-post-table',
  templateUrl: './post-table.component.html',
  standalone:false,
  styleUrls: ['./post-table.component.css']
})
export class PostTableComponent implements OnInit {
  displayedColumns: string[] = ['post_header', 'status', 'posted_by', 'posted_at', 'categoryName', 'actions'];
  dataSource = new MatTableDataSource<Post>([]);
  posts: Post[] = [];
  categories: any[] = [];
  loggedIn = false;
  selectedCategory: string = '';
  searchKey: string = '';
  
  @ViewChild(MatSort) sort!: MatSort;
  @ViewChild(MatPaginator) paginator!: MatPaginator;

  constructor(
    private postService: PostService,
    private loginService: LoginService,
    private dialog: MatDialog,
    private snackBar: MatSnackBar,
    private router: Router
  ) {}

  ngOnInit(): void {
    this.loggedIn = this.loginService.isLoggedIn();
    this.loadPosts();
    this.loadCategories();
  }

  ngAfterViewInit() {
    this.dataSource.paginator = this.paginator;
    this.dataSource.sort = this.sort;
    this.setupCustomSort();
  }

  setupCustomSort() {
    this.dataSource.sortingDataAccessor = (item, property) => {
      switch(property) {
        case 'categoryName': return item.category?.categoryName || '';
        default: return (item as any)[property];
      }
    };
  }

  loadPosts() {
    this.postService.getPosts().subscribe(
      (data: Post[]) => {
        this.posts = data;
        this.applyFilters();
      },
      (error) => {
        console.error('Error loading posts:', error);
        this.snackBar.open('Error loading posts. Please try again later.', 'Close', {
          duration: 3000
        });
      }
    );
  }

  loadCategories() {
    this.postService.getCategories().subscribe(
      (data) => {
        this.categories = data;
      },
      (error) => {
        console.error('Error loading categories:', error);
      }
    );
  }

  applyFilters() {
    let filteredPosts = [...this.posts];
    
   
    if (!this.loggedIn) {
      filteredPosts = filteredPosts.filter(post => post.status === 'ACTIVE');
    }
    

    if (this.selectedCategory) {
      filteredPosts = filteredPosts.filter(post => 
        post.category?.categoryName === this.selectedCategory
      );
    }
    
    this.dataSource.data = filteredPosts;
    this.applySearch();
  }

  applySearch() {
    this.dataSource.filter = this.searchKey.trim().toLowerCase();
    
    if (this.dataSource.paginator) {
      this.dataSource.paginator.firstPage();
    }
  }

  onSearchClear() {
    this.searchKey = "";
    this.applySearch();
  }

  onCategoryChange() {
    this.applyFilters();
  }

  deletePost(postId: number) {
    const dialogRef = this.dialog.open(ConfirmDialogComponent, {
      width: '350px',
      data: {
        title: 'Confirm Delete',
        message: 'Are you sure you want to delete this post?',
        confirmButtonText: 'Delete',
        cancelButtonText: 'Cancel'
      }
    });

    dialogRef.afterClosed().subscribe(result => {
      if (result) {
        this.postService.deletePost(postId).subscribe(
          () => {
            
            this.posts = this.posts.filter(post => post.post_id !== postId);
            this.applyFilters();
            this.snackBar.open('Post deleted successfully', 'Close', {
              duration: 3000
            });
          },
          error => {
            console.error('Error deleting post:', error);
            this.snackBar.open('Error deleting post', 'Close', {
              duration: 3000
            });
          }
        );
      }
    });
  }

  toggleStatus(post: Post) {
    const action = post.status === 'ACTIVE' ? 'deactivate' : 'activate';
    
    const dialogRef = this.dialog.open(ConfirmDialogComponent, {
      width: '350px',
      data: {
        title: `Confirm ${action}`,
        message: `Are you sure you want to ${action} this post?`,
        confirmButtonText: 'Yes',
        cancelButtonText: 'Cancel'
      }
    });

    dialogRef.afterClosed().subscribe(result => {
      if (result) {
        this.postService.togglestatus(post.post_id).subscribe(
          (updatedPost) => {
            const index = this.posts.findIndex(p => p.post_id === post.post_id);
            if (index !== -1) {
              this.posts[index].status = updatedPost.status;
              this.applyFilters();
            }
            this.snackBar.open(`Post ${action}d successfully`, 'Close', {
              duration: 3000
            });
          },
          error => {
            console.error(`Error ${action}ing post:`, error);
            this.snackBar.open(`Error ${action}ing post`, 'Close', {
              duration: 3000
            });
          }
        );
      }
    });
  }

  editPost(postId: number) {
    this.router.navigate(['/new-post', postId]);
  }

  viewPost(postId: number) {
    this.router.navigate(['/viewpost', postId], { queryParams: { mode: 'view' } });
  }

  getStatusClass(status: string): string {
    return status === 'ACTIVE' ? 'status-active' : 'status-inactive';
  }
}
