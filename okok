import { Component, OnInit } from '@angular/core';
import { ActivatedRoute, Router } from '@angular/router';
import { PostService } from '../../services/post.service';
import { Post } from '../../services/post.model';
import { LoginService } from '../../services/login.service';

@Component({
  selector: 'app-new-post',
  standalone: false,
  templateUrl: './new-post.component.html',
  styleUrls: ['./new-post.component.css']
})
export class NewPostComponent implements OnInit {

  posts: Post[] = [];
  isEditMode = false;
  isViewMode = false;
  statusValue: string = "ACTIVE";

  categories: any[] = [];

  post = {
    post_id: 0,
    post_header: '',
    post_content: '',
    status: 'ACTIVE',
    posted_by: '',
    posted_at: '',
    category:{
      categoryId:0,
      categoryName:''
    }
  };

  responseMessage: string = '';

  constructor(
    private postService: PostService,
    private route: ActivatedRoute,
    private router: Router,
    private loginService: LoginService
  ) { }

  ngOnInit(): void {
    const storedUsername = this.loginService.getUsername();
    if (storedUsername) {
      this.post.posted_by = storedUsername;
    }

    this.postService.getCategories().subscribe(data => {
      this.categories = data;
    });

    this.route.params.subscribe(params => {
      const postId = params['id'];
      if (postId) {
        this.isEditMode = true;

        const numericPostId = Number(postId);

        this.route.queryParams.subscribe(queryParams => {
          if (queryParams['mode'] === 'view') {
            this.isViewMode = true;
            this.isEditMode = false;
          }
        });

        this.postService.getPosts().subscribe(posts => {
          this.posts = posts;
          const postToEdit = posts.find(p => p.post_id === numericPostId);
          if (postToEdit) {
            this.post = {
              post_id: postToEdit.post_id,
              post_header: postToEdit.post_header,
              post_content: postToEdit.post_content,
              status: postToEdit.status,
              posted_by: postToEdit.posted_by,
              posted_at: postToEdit.posted_at,
              category:postToEdit.category||{categoryId:0,categoryName:''}
             
            };
          } else {
            this.responseMessage = 'Post not found!';
          }
        });
      }
    });
  }

  submitPostForm() {
    const { categoryId, ...rest } = this.post;

    const postPayload = {
      ...rest,
      category: {
        categoryId: categoryId,
        categoryName:categoryName
      }
    };

    if (this.isEditMode) {
      this.postService.editPost(postPayload).subscribe({
        next: (response) => {
          this.responseMessage = 'Post updated successfully!';
        },
        error: (error) => {
          this.responseMessage = 'Failed to update post!';
        }
      });
    } else {
      this.postService.createPost(postPayload).subscribe({
        next: (response) => {
          this.responseMessage = 'Post created successfully!';
          this.post = {
            post_id: 0,
            post_header: '',
            post_content: '',
            status: 'ACTIVE',
            posted_by: '',
            posted_at: '',
            categoryId: 0
          };
        },
        error: (error) => {
          this.responseMessage = 'Failed to submit data!';
        }
      });
    }
  }

  cancelForm() {
    this.router.navigate(['/home']);
  }
}
